"""add default roles and permissions

Revision ID: d6349403285d
Revises: 784f17aaae55
Create Date: 2025-09-12 23:37:35.506588

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd6349403285d'
down_revision: Union[str, Sequence[str], None] = '784f17aaae55'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

seed={
  "roles": [
    {"name": "admin", "description": "Full administrator"},
    {"name": "seller", "description": "Seller: manage own products"},
    {"name": "buyer", "description": "Buyer: view and purchase"}
  ],
  "permissions": [
    {"name": "product:read",   "description": "Read/list products"},
    {"name": "product:create", "description": "Create product"},
    {"name": "product:update", "description": "Update product"},
    {"name": "product:delete", "description": "Delete product"},
    {"name": "user:manage",    "description": "Manage users"}
  ],
  "role_permissions": {
    "admin": ["product:read", "product:create", "product:update", "product:delete", "user:manage"],
    "seller": ["product:read", "product:create", "product:update"],
    "buyer": ["product:read"]
  }
}


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    conn=op.get_bind()

    role_table = "role"
    permission_table = "permission"
    rolepermission_table = "rolepermission"

     # 1) insert roles idempotently
    for role in seed.get("roles", []):
        name = role.get("name")
        desc = role.get("description") or ""
        conn.execute(
            sa.text(
                """
                INSERT INTO {role_table} (name, description)
                SELECT :name, :desc
                WHERE NOT EXISTS (SELECT 1 FROM {role_table} WHERE name = :name)
                """.format(role_table=role_table)
            ),
            {"name": name, "desc": desc},
        )

    # 2) insert permissions idempotently
    for perm in seed.get("permissions", []):
        pname = perm.get("name")
        pdesc = perm.get("description") or ""
        conn.execute(
            sa.text(
                """
                INSERT INTO {perm_table} (name, description)
                SELECT :pname, :pdesc
                WHERE NOT EXISTS (SELECT 1 FROM {perm_table} WHERE name = :pname)
                """.format(perm_table=permission_table)
            ),
            {"pname": pname, "pdesc": pdesc},
        )

    # 3) map role -> permission using names (idempotent)
    role_perms = seed.get("role_permissions", {})

    # build a map of permission name -> id
    perm_rows = conn.execute(sa.text(f"SELECT id, name FROM {permission_table}")).fetchall()
    perm_map = {row[1]: row[0] for row in perm_rows}

    # build map of role name -> id
    role_rows = conn.execute(sa.text(f"SELECT id, name FROM {role_table}")).fetchall()
    role_map = {row[1]: row[0] for row in role_rows}
    
    for role_name, perm_names in role_perms.items():
        role_id = role_map.get(role_name)
        if not role_id:
            # skip if role not found (defensive)
            continue
        for pname in perm_names:
            perm_id = perm_map.get(pname)
            if not perm_id:
                # skip missing perm (defensive)
                continue
            conn.execute(
                sa.text(
                    """
                    INSERT INTO {rp_table} (role_id, permission_id)
                    SELECT :role_id, :perm_id
                    WHERE NOT EXISTS (
                        SELECT 1 FROM {rp_table}
                        WHERE role_id = :role_id AND permission_id = :perm_id
                    )
                    """.format(rp_table=rolepermission_table)
                ),
                {"role_id": role_id, "perm_id": perm_id},
            )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # ### end Alembic commands ###
